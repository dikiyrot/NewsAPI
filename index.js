(()=>{"use strict";var e={659:(e,t,r)=>{r.r(t)},283:(e,t,r)=>{r.r(t)},485:(e,t,r)=>{r.r(t)},717:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(r(842)),n=r(527);t.default=class{constructor(){this.controller=new s.default,this.view=new n.AppView}start(){document.querySelector(".sources").addEventListener("click",(e=>this.controller.getNews(e,(e=>this.view.drawNews(e))))),this.controller.getSources((e=>this.view.drawSources(e)))}}},853:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(r(24));class n extends s.default{constructor(){super("https://nodenews.herokuapp.com/",{apiKey:"af9f7aaae3b14e15a37e69e7a9d468fb"})}}t.default=n},842:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(r(853));class n extends s.default{getSources(e){super.getResp({endpoint:"sources"},e)}getNews(e,t){let r=e.target;const o=e.currentTarget;for(;r!==o;){if(r.classList.contains("source__item")){const e=r.getAttribute("data-source-id");return void(o.getAttribute("data-source")!==e&&e&&(o.setAttribute("data-source",e),super.getResp({endpoint:"everything",options:{sources:e}},t)))}r=r.parentNode}}}t.default=n},24:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t){this.baseLink=e,this.options=t}getResp({endpoint:e="",options:t={}},r=(()=>{console.error("No callback for GET response")})){this.load("GET",e,r,t)}errorHandler(e){if(!e.ok)throw 401!==e.status&&404!==e.status||console.log(`Sorry, but there is ${e.status} error: ${e.statusText}`),Error(e.statusText);return e}makeUrl(e,t){const r=Object.assign(Object.assign({},this.options),e);let o=`${this.baseLink}${t}?`;return Object.keys(r).forEach((e=>{o+=`${e}=${r[e]}&`})),o.slice(0,-1)}load(e,t,r,o={}){fetch(this.makeUrl(o,t),{method:e}).then(this.errorHandler).then((e=>e.json())).then((e=>r(e))).catch((e=>console.error(e)))}}},527:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppView=void 0;const s=o(r(798)),n=o(r(53));class u{constructor(){this.news=new s.default,this.sources=new n.default}drawNews(e){const t=(null==e?void 0:e.articles)?null==e?void 0:e.articles:[];this.news.draw(t)}drawSources(e){const t=(null==e?void 0:e.sources)?null==e?void 0:e.sources:[];this.sources.draw(t)}}t.AppView=u,t.default=u},798:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),r(659),t.default=class{draw(e){const t=e.length>=10?e.filter(((e,t)=>t<10)):e,r=document.createDocumentFragment(),o=document.querySelector("#newsItemTemp");t.forEach(((e,t)=>{const s=o.content.cloneNode(!0);t%2&&s.querySelector(".news__item").classList.add("alt"),s.querySelector(".news__meta-photo").style.backgroundImage=`url(${e.urlToImage||"img/news_placeholder.jpg"})`,s.querySelector(".news__meta-author").textContent=e.author||e.source.name,s.querySelector(".news__meta-date").textContent=e.publishedAt.slice(0,10).split("-").reverse().join("-"),s.querySelector(".news__description-title").textContent=e.title,s.querySelector(".news__description-source").textContent=e.source.name,s.querySelector(".news__description-content").textContent=e.description,s.querySelector(".news__read-more a").setAttribute("href",e.url),r.append(s)})),document.querySelector(".news").innerHTML="",document.querySelector(".news").appendChild(r)}}},53:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),r(283),t.default=class{draw(e){const t=document.createDocumentFragment(),r=document.querySelector("#sourceItemTemp");e.forEach((e=>{const o=r.content.cloneNode(!0);o.querySelector(".source__item-name").textContent=e.name,o.querySelector(".source__item").setAttribute("data-source-id",e.id),t.append(o)})),document.querySelector(".sources").append(t)}}},607:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(r(717));r(485),(new s.default).start()}},t={};function r(o){var s=t[o];if(void 0!==s)return s.exports;var n=t[o]={exports:{}};return e[o].call(n.exports,n,n.exports,r),n.exports}r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,